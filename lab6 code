
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node

    def print_forward(self, node):
        if not node:
            return
        print(node.data, end=" ")
        self.print_forward(node.next)

    def print_reverse(self, node):
        if not node:
            return
        self.print_reverse(node.next)
        print(node.data, end=" ")

ll = LinkedList()
ll.append(1)
ll.append(2)
ll.append(3)
ll.append(4)

print("Linked List in Forward Order:")
ll.print_forward(ll.head)
print("\nLinked List in Reverse Order:")
ll.print_reverse(ll.head)




class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def insert_at_beginning(head, data):
    if head is None:
        return Node(data)
    new_node = Node(data)
    new_node.next = head
    return new_node

def insert_at_end(head, data):
    if head is None:
        return Node(data)
    head.next = insert_at_end(head.next, data)
    return head

def print_list(head):
    if head is None:
        print("None")
        return
    print(head.data, "->", end=" ")
    print_list(head.next)

head = None
head = insert_at_beginning(head, 3)
head = insert_at_beginning(head, 2)
head = insert_at_beginning(head, 1)

print("After inserting at the beginning:")
print_list(head)

head = insert_at_end(head, 4)
head = insert_at_end(head, 5)

print("After inserting at the end:")
print_list(head)





class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def merge_sorted_lists(l1, l2):
    if l1 is None:
        return l2
    if l2 is None:
        return l1

    if l1.data < l2.data:
        l1.next = merge_sorted_lists(l1.next, l2)
        return l1
    else:
        l2.next = merge_sorted_lists(l1, l2.next)
        return l2

def print_list(head):
    if head is None:
        print("None")
        return
    print(head.data, "->", end=" ")
    print_list(head.next)

def create_list(arr):
    if not arr:
        return None
    head = Node(arr[0])
    head.next = create_list(arr[1:])
    return head

list1 = create_list([1, 3, 5])
list2 = create_list([2, 4, 6])

print("List 1:")
print_list(list1)
print("List 2:")
print_list(list2)

merged_head = merge_sorted_lists(list1, list2)
print("Merged List:")
print_list(merged_head)


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def find_nth_from_end(head, n, count=[0]):
    if head is None:
        return None

    result = find_nth_from_end(head.next, n, count)
    count[0] += 1

    if count[0] == n:
        return head

    return result

def print_list(head):
    if head is None:
        print("None")
        return
    print(head.data, "->", end=" ")
    print_list(head.next)

def create_list(arr):
    if not arr:
        return None
    head = Node(arr[0])
    head.next = create_list(arr[1:])
    return head

head = create_list([1, 2, 3, 4, 5])

print("Original List:")
print_list(head)

n = 2
nth_node = find_nth_from_end(head, n)
if nth_node:
    print(f"The {n}th node from the end is:", nth_node.data)
else:
    print(f"The {n}th node from the end does not exist.")

